<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Dynamic Search with Filters</title>
    <script src="https://cdn.tailwindcss.com"></script>
</head>
<body class="bg-gray-50 flex flex-col min-h-screen">
    
     <!-- navbar -->
     <nav class="bg-white shadow-sm border-b border-gray-100">
        <div class="max-w-6xl mx-auto px-4 py-3">
            <ul class="flex space-x-8">
                <li><a href="/" class="text-gray-600 hover:text-blue-500">Home</a></li>
                <li><a href="/profile" class="text-gray-600 hover:text-blue-500">Profile</a></li>
                <li><a href="/quiz" class="text-gray-600 hover:text-blue-500">Quiz</a></li>
                <li><a href="/auth/login" class="text-gray-600 hover:text-blue-500">Login</a></li>
                <li><a href="/auth/logout" class="text-gray-600 hover:text-blue-500">Logout</a></li>
            </ul>
        </div>
    </nav>

    
    <main class="flex-grow">

   
    <div class="max-w-2xl mx-auto p-4 bg-white rounded-lg shadow mt-4">
        <h3 class="text-lg font-medium mb-3">Search and Filters</h3>
        <!-- search input -->
        <input 
            id="searchInput" 
            type="text" 
            placeholder="Search Quran words..." 
            class="w-full p-2 border rounded mb-4"
        >
        <!-- Harakat filters options -->
        <div class="grid grid-cols-2 md:grid-cols-3 gap-3">
            
            <label class="flex items-center space-x-2">
                <input type="checkbox" value="َ" class="form-checkbox filter-checkbox">
                <span>Fatha (ــَـ)</span>
            </label>
            <label class="flex items-center space-x-2">
                <input type="checkbox" value="ِ" class="form-checkbox filter-checkbox">
                <span>Kasra (ــِـ)</span>
            </label>
            <label class="flex items-center space-x-2">
                <input type="checkbox" value="ُ" class="form-checkbox filter-checkbox">
                <span>Dhamma (ــُـ)</span>
            </label>
            <label class="flex items-center space-x-2">
                <input type="checkbox" value="ً" class="form-checkbox filter-checkbox">
                <span>Fathatain (ــًـ)</span>
            </label>
            <label class="flex items-center space-x-2">
                <input type="checkbox" value="ٍ" class="form-checkbox filter-checkbox">
                <span>Kasratain (ــٍـ)</span>
            </label>
            <label class="flex items-center space-x-2">
                <input type="checkbox" value="ٌ" class="form-checkbox filter-checkbox">
                <span>Dhammatain (ــٌـ)</span>
            </label>
            <label class="flex items-center space-x-2">
                <input type="checkbox" value="ّ" class="form-checkbox filter-checkbox">
                <span>Shaddaa (ــّـ)</span>
            </label>
            <label class="flex items-center space-x-2">
                <input type="checkbox" value="ْ" class="form-checkbox filter-checkbox">
                <span>Sukun (ــْـ)</span>
            </label>
            <label class="flex items-center space-x-2">
                <input type="checkbox" value="ٰ" class="form-checkbox filter-checkbox">
                <span>Baby Alif (ــٰـ)</span>
            </label>
        </div>
    </div>

    <!-- results -->
    <div class="max-w-2xl mx-auto p-6">
        <div id="results" class="mt-4"></div>
    </div>
</main>

    <!--footer-->

    <footer class="bg-white shadow-sm border-t border-gray-100">
        <div class="max-w-6xl mx-auto px-4 py-4 flex justify-center items-center">
            <p class="text-gray-600 text-sm">&copy; CMPS 3390 - Project 3</p>
        </div>
    </footer>
  
    <script>
          let currentPage =1; 
    let totalPages = 1; 

    function searchWords() {
        const searchTerm = document.getElementById('searchInput').value.trim();
        const page = currentPage; // current pg to fetch   

        if (searchTerm === '') { // show message if no search word is given
                document.getElementById('results').innerHTML = '<p class="text-center text-gray-500">Please enter a search term.</p>';
               // document.getElementById('pagination').classList.add('hidden');
                return;
        }

        // api call to backend search endpoint 
        // fetch > GET request to backend API 

        fetch(`/api/search?word=${searchTerm}&page=${page}`)
            .then(response => response.json()) // convert response to json
            .then(data => {
                const resultsDiv = document.getElementById('results');
                // check if results exist 
                if (data.results?.length > 0) { // maps through the results  array and generate html for each result 
                    const html = data.results.map(result => `
                        <div class="bg-white rounded p-4 mb-2">
                            <div class="text-2xl text-right">${result.arabic_text}</div>
                            <div class="text-lg text-right text-gray-500">${result.arabic_text_simple}</div>
                            <div class="text-gray-600">${result.english_text}</div>
                        </div>
                    `).join(''); // join all html strings into one 
                    resultsDiv.innerHTML = html;  //send to results container 
                } else { //errr
                    resultsDiv.innerHTML = '<p class="text-center text-gray-500">No results found</p>';
            }


                //pagintation skipped 
           

            })
            .catch(error => { // handle api error 
                console.error('Error:', error);
                document.getElementById('results').innerHTML = 
                    '<p class="text-center text-red-500">Error searching</p>';
            });
    }

    let timeoutId = null; 

    const searchInput = document.getElementById('searchInput');

    searchInput.addEventListener('input', () => {
        // if existing timeout clear (prevent multiple api calls)
        if (timeoutId) {
            clearTimeout(timeoutId);
        }
        // set new timer, waiting 3 secs after user stops typing 
        timeoutId = setTimeout(() => {
            currentPage = 1; // reset to first page
            searchWords(); //call search function to fetch
        }, 300); // delay 3 secs
    });

    </script>
    
</body>
</html>
